---
description: 
globs: 
alwaysApply: false
---
---
description:

Design a simple, elegant, and responsive Web Scraper Dashboard UI using Material Design principles (e.g., Material UI / MUI for React).
---
Key Features:

1. Main Table View (Default Screen):
	•	Display a data table showing all previously crawled domains.
	•	Each row must include:
	•	Domain Name
	•	URL
	•	Request Duration
	•	Timestamp
	•	HTML Tag Count
	•	Status (use Material Design Chip components with colors to indicate: in_progress, done, failed)
	•	The table should auto-refresh on page load and at intervals by fetching updated data from the backend.

2. Add URL Button:
	•	A prominent Floating Action Button (FAB) or + Add button in the top-right corner.
	•	Clicking it opens a Material Design Dialog with a TextField to enter a URL.
	•	Validate the URL input (e.g., using regex or built-in form validation).
	•	On submission:
	•	Send a request to the backend to start the crawl.
	•	Show a loading indicator with the message: “The page is being crawled and processed…”
	•	Close the dialog and insert a new row in the table with status in_progress.

3. Status Update:
	•	The frontend should poll the backend service periodically to update the status of each crawl.
	•	Update the status chip and other data (e.g., duration, tag count) once crawling is complete.

4. Historical Summary Section:
	•	Include a secondary tab or a collapsible panel below the table.
	•	Display a simple grouped summary:
	•	Total HTML tag count per domain (e.g., using a grouped bar chart or mini-table).

5. Backend Integration via .env:
	•	The backend is a separate service.
	•	All HTTP requests should be sent to a base URL defined in a .env file (e.g., VITE_BACKEND_URL or REACT_APP_BACKEND_URL).
	•	Use this base URL to:
	•	Submit crawl requests.
	•	Fetch the list of crawled domains and their statuses.

⸻

Visual & UX Guidelines:
	•	Use Material UI components for layout, typography, and inputs.
	•	Prioritize clean spacing, readable fonts, and minimal visual clutter.
	•	Use icons (like a status spinner or checkmark) where appropriate.
	•	Ensure dark/light theme compatibility if possible.

⸻
Let me know if you’d like me to generate example code for this UI using React and Material UI.
